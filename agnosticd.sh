#!/bin/bash
set -x 

# This script prompts the user to enter a host and an agnosticd action.
# The user is asked to input the host address and the desired action to perform with agnosticd.
# The agnosticd action can be either 'create' or 'remove'.
read -p "Enter the host: " host
read -p "Enter the agnosticd action (create or remove): " agnosticd_action

# This script checks the value of the 'agnosticd_action' variable.
# If the value is not 'create' or 'remove', it prints an error message
# and exits with a status code of 1.
if [[ "$agnosticd_action" != "create" && "$agnosticd_action" != "remove" ]]; then
  echo "Invalid agnosticd action. Please enter 'create' or 'remove'."
  exit 1
fi

# This script sets up the environment for deploying a workload using agnosticd.
# It defines the repository URL and the specific workload to be used.
# If the GUID environment variable is not set, it prompts the user to enter the GUID.
# Variables:
#   agnosticd_repo: URL of the agnosticd repository.
#   agnosticd_workload: Name of the workload to be deployed.
#   GUID: Environment variable for the GUID (if not set, the user is prompted to enter it).
agnosticd_repo=https://github.com/tosin2013/agnosticd.git # https://github.com/redhat-cop/agnosticd
agnosticd_workload=ocp4_workload_argocd_quay_todo_app # ocp4_workload_gitea_operator
if [ -z "$GUID" ]; then
  read -p "Enter the GUID: " guid
else
  guid=$GUID
fi

# This script installs necessary packages and sets up the agnosticd repository.
# 
# It performs the following steps:
# 1. Installs required packages: wget, openssh-clients, sshpass, ansible-core, openssl, and python3-jmespath.
# 2. Checks if the agnosticd directory exists in the user's home directory:
#    - If it exists, it navigates to the directory, checks out the specified workload branch, and pulls the latest changes.
#    - If it does not exist, it clones the agnosticd repository and navigates to the newly created directory.
#
# Environment variables:
# - agnosticd_workload: The branch or workload to checkout in the agnosticd repository.
# - agnosticd_repo: The URL of the agnosticd repository to clone.
sudo dnf install wget openssh-clients sshpass ansible-core openssl python3-jmespath -y
if [ -d "$HOME/agnosticd" ]; then
  cd $HOME/agnosticd
  git checkout ${agnosticd_workload}
  git pull
else
  git clone $agnosticd_repo
  cd $HOME/agnosticd
fi

# This script performs the following actions:

# 1. Removes the existing 'install_operator' directory from '/etc/ansible/roles'.
# 2. Copies the 'install_operator' directory from '/home/lab-user/agnosticd/ansible/roles' to '/etc/ansible/roles' with verbose output.
# 3. Lists the contents of '/etc/ansible/roles' to verify the copy operation.
# 4. Creates a temporary Ansible hosts file at '/tmp/hosts' with a control node entry.
# 5. Ensures that the Python package installer 'pip' is available in the specified virtual environment.
# 6. Installs the 'openshift', 'pyyaml', 'kubernetes', and 'jmespath' Python packages in the specified virtual environment.
# 7. Installs the same Python packages globally using 'pip3'.
sudo rm -rf /etc/ansible/roles/install_operator
sudo cp -avi /home/lab-user/agnosticd/ansible/roles/install_operator /etc/ansible/roles
ls /etc/ansible/roles
echo "[all]" > /tmp/hosts
echo "control  ansible_host=$host    ansible_connection=ssh ansible_user=$USER" ansible_ssh_private_key_file=/home/$USER/.ssh/github-actions >> /tmp/hosts
sudo /opt/virtualenvs/k8s/bin/python -m ensurepip
sudo /opt/virtualenvs/k8s/bin/python -m pip install openshift pyyaml kubernetes jmespath
sudo pip3 install openshift pyyaml kubernetes jmespath && pip3 install  openshift pyyaml kubernetes jmespath

# This script installs the necessary Ansible collections for Kubernetes and general community modules.
# It uses the ansible-galaxy command to install the following collections:
# - kubernetes.core: Provides modules and plugins for managing Kubernetes resources.
# - community.general: A collection of modules and plugins from the Ansible community.
ansible-galaxy collection install kubernetes.core community.general

# 1. Downloads the 'generate_vars.sh' script from the specified GitHub repository.
# 2. Makes the downloaded script executable.
# 3. Executes the 'generate_vars.sh' script.
# 4. Displays the contents of the 'extra_vars.yaml' file generated by the script.
curl -OL https://raw.githubusercontent.com/tosin2013/todo-demo-app-helmrepo/main/generate_vars.sh && chmod +x generate_vars.sh
./generate_vars.sh && cat extra_vars.yaml

# This script runs an Ansible playbook for configuring OpenShift workloads.
# It uses a temporary hosts file and various environment variables for configuration.
# The script also includes extra variables from a YAML file and prints the current working directory.
#
# Variables used:
# - $HOME: Home directory of the current user.
# - $USER: Username of the current user.
# - $openshift_user: OpenShift username.
# - $ANSIBLE_PASSWORD: Ansible password (retrieved from environment variables).
# - $agnosticd_workload: Workload configuration for agnosticd.
# - $guid: Unique identifier for the workload.
# - $agnosticd_action: Action to be performed by agnosticd.
# - extra_vars.yaml: Additional variables for the playbook.
echo ansible-playbook -i /tmp/hosts ${HOME}/agnosticd/ansible/configs/ocp-workloads/ocp-workload.yml -e" ~/.ssh/github-actions" -e"ansible_user=$USER" \
  -e"ocp_username=$openshift_user"  -e ansible_password='lookup("env", "ANSIBLE_PASSWORD")' \
  -e"ocp_workload=$agnosticd_workload" -e"silent=False" -e"guid=$guid"  -e"ACTION=$agnosticd_action"  -e"@extra_vars.yaml" -v

pwd

# This script runs an Ansible playbook to configure OpenShift workloads.
# 
# Usage:
#   ansible-playbook -i /tmp/hosts ${HOME}/agnosticd/ansible/configs/ocp-workloads/ocp-workload.yml [options]
#
# Options:
#   -i /tmp/hosts                        Specifies the inventory file.
#   -e" ~/.ssh/github-actions"           Specifies the SSH key for GitHub actions.
#   -e"ansible_user=$USER"               Sets the Ansible user to the current user.
#   -e"ocp_username=$openshift_user"     Sets the OpenShift username.
#   -e ansible_password='lookup("env", "ANSIBLE_PASSWORD")' 
#                                        Retrieves the Ansible password from the environment variable.
#   -e"ocp_workload=$agnosticd_workload" Specifies the OpenShift workload.
#   -e"silent=False"                     Sets the silent mode to False.
#   -e"guid=$guid"                       Sets the GUID.
#   -e"ACTION=$agnosticd_action"         Specifies the action to be performed.
#   -e"@extra_vars.yaml"                 Includes additional variables from the extra_vars.yaml file.
#   -v                                   Enables verbose mode.
ansible-playbook -i /tmp/hosts ${HOME}/agnosticd/ansible/configs/ocp-workloads/ocp-workload.yml -e" ~/.ssh/github-actions" -e"ansible_user=$USER" \
  -e"ocp_username=$openshift_user"  -e ansible_password='lookup("env", "ANSIBLE_PASSWORD")' \
  -e"ocp_workload=$agnosticd_workload" -e"silent=False" -e"guid=$guid"  -e"ACTION=$agnosticd_action"  -e"@extra_vars.yaml" -v

